{"ast":null,"code":"import RestAPI from '../rest';\nlet initial = {\n  username: \"\",\n  password: \"\",\n  mode: \"login\",\n  loginstate: \"initial\"\n};\nconst savedState = sessionStorage.getItem('loginState');\nif (savedState != null) {\n  initial = Object.assign({}, initial, JSON.parse(savedState));\n}\nconst appState = (state = initial, action, data) => {\n  console.log(\"in reducer login\");\n  switch (action.type) {\n    case 'SET_REGISTRATION_MODE':\n      {\n        let mode = {\n          \"mode\": 'register'\n        };\n        let fields = {\n          \"username\": \"\",\n          \"email\": \"\",\n          \"password\": \"\"\n        };\n        let new_state = Object.assign({}, state, mode, fields);\n        return new_state;\n      }\n    case 'REGISTER_USER':\n      {\n        console.log(\"login.REGISTER_USER: \");\n        new RestAPI().registerUser(action.dispatch, action.username, action.password, action.email);\n        let mode = {\n          \"mode\": 'login'\n        };\n        let new_state = Object.assign({}, state, mode);\n        return new_state;\n      }\n    case 'LOGIN_TO_APP':\n      {\n        let newState = {\n          username: action.username,\n          password: action.password,\n          loginstate: action.loginstate,\n          mode: 'login'\n        };\n        console.log(\"in LOGIN_TO_APP\");\n        console.log(\"login.LOGIN_TO_APP: \" + JSON.stringify(newState));\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        sessionStorage.setItem('loginState', JSON.stringify(newState));\n        return Object.assign({}, newState);\n      }\n    case 'GET_JWT_TOKEN':\n      {\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        break;\n      }\n    case 'LOG_OUT':\n      {\n        let newState = {\n          username: 'none',\n          password: '',\n          loginstate: 'logged-out',\n          mode: 'login'\n        };\n        console.log(\"in LOG_OUT\");\n        console.log(\"login.LOG_OUT: \" + JSON.stringify(newState));\n        window['token'] = null;\n        return Object.assign({}, newState);\n      }\n    case 'LOGIN_SUCCESS':\n      {\n        // update state with token and login status\n        let loginstate = 'logged-in';\n        let token = action.token;\n        const obj = Object.assign({}, state, {\n          loginstate,\n          \"token\": token\n        });\n        window['token'] = token;\n        return obj;\n      }\n    case 'LOGIN_FAILED':\n      {\n        // update state with token and login status\n        alert(\"login failed!\");\n        let loginstate = 'login-failed';\n        let token = \"\";\n        let mode = \"login\";\n        const obj = Object.assign({}, state, {\n          loginstate,\n          token,\n          mode\n        });\n        return obj;\n      }\n    case 'UPDATE_LOGIN_FORM_OBJECT':\n      {\n        console.log(\"in reducer login.UPDATE_LOGIN_FORM_OBJECT\");\n        let field = {};\n        field[action.field_name] = action.field_value;\n        const obj = Object.assign({}, state, field);\n        console.log(\"login.UPDATE_LOGIN_FORM_OBJECT: \" + JSON.stringify(obj));\n        return obj;\n      }\n    default:\n      return state;\n  }\n};\nexport default appState;","map":{"version":3,"names":["RestAPI","initial","username","password","mode","loginstate","savedState","sessionStorage","getItem","Object","assign","JSON","parse","appState","state","action","data","console","log","type","fields","new_state","registerUser","dispatch","email","newState","stringify","getJWTToken","setItem","window","token","obj","alert","field","field_name","field_value"],"sources":["/home/wasadmin/Documents/src/reducers/login.js"],"sourcesContent":["import RestAPI from '../rest';\nlet initial = {username:\"\", password:\"\", mode: \"login\", loginstate: \"initial\" };\nconst savedState = sessionStorage.getItem('loginState');\nif(savedState != null){\n    initial = Object.assign({}, initial, JSON.parse(savedState));\n}\n\n\nconst appState = (state = initial, action, data) => {\n    console.log(\"in reducer login\");\n\n    switch (action.type) {\n\n    case 'SET_REGISTRATION_MODE':{\n        let mode = {\"mode\":'register'};\n        let fields = {\"username\":\"\", \"email\": \"\", \"password\": \"\"};\n        let new_state = Object.assign({}, state, mode, fields);\n        return new_state;\n    }\n\n    case 'REGISTER_USER': {\n        console.log( \"login.REGISTER_USER: \");\n        new RestAPI().registerUser(action.dispatch, action.username, action.password, action.email);\n        let mode = {\"mode\":'login'};\n        let new_state = Object.assign({}, state, mode);\n        return new_state;    \n    }\n\n    case 'LOGIN_TO_APP': {\n        let newState = {username: action.username, password:action.password, loginstate: action.loginstate, mode: 'login' };\n        console.log(\"in LOGIN_TO_APP\");\n        console.log( \"login.LOGIN_TO_APP: \" + JSON.stringify(newState));\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        sessionStorage.setItem('loginState', JSON.stringify(newState));\n        return  Object.assign({}, newState);\n    } \n    case 'GET_JWT_TOKEN':{\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        break;\n    }\n\n    case 'LOG_OUT': {\n        let newState = {username: 'none', password:'', loginstate: 'logged-out', mode: 'login' };\n        console.log(\"in LOG_OUT\");\n        console.log( \"login.LOG_OUT: \" + JSON.stringify(newState));\n        window['token'] = null;\n        return  Object.assign({}, newState);       \n    }\n\n    case 'LOGIN_SUCCESS': {\n        // update state with token and login status\n        let loginstate = 'logged-in';\n        let token = action.token;\n        const obj = Object.assign({}, state, { loginstate, \"token\":token });\n        window['token'] = token;\n        return obj;        \n    }\n    case 'LOGIN_FAILED': {\n        // update state with token and login status\n        alert(\"login failed!\");\n        let loginstate = 'login-failed';\n        let token = \"\";\n        let mode = \"login\";\n        const obj = Object.assign({}, state, { loginstate, token, mode });\n        return obj;       \n    }\n\n    case 'UPDATE_LOGIN_FORM_OBJECT': {\n        console.log(\"in reducer login.UPDATE_LOGIN_FORM_OBJECT\");\n        let field = {};\n        field[action.field_name] = action.field_value;\n        const obj = Object.assign({}, state, field);\n        console.log( \"login.UPDATE_LOGIN_FORM_OBJECT: \" + JSON.stringify(obj));\n        return obj;\n      }\n    default:\n        return state\n    }\n}\n\nexport default appState"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}