{"ast":null,"code":"import RestAPI from '../rest';\nconst initial = [{\n  id: 100,\n  code: 'CNF001',\n  title: 'All-Java Conference',\n  description: 'Lectures and exhibits covering all Java topics'\n}, {\n  id: 101,\n  code: 'CNC001',\n  title: 'Rock Concert',\n  description: 'Full blown rock concert'\n}];\nconst events = (state = initial, action, data) => {\n  switch (action.type) {\n    case 'ADD_EVENT':\n      {\n        console.log(\"in reducer event.ADD_EVENT\");\n        let otherevents = state.filter(event => {\n          if (event.id === action.event.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...otherevents, Object.assign({}, action.event)];\n        console.log(\"in reducer event.ADD_EVENT, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n    case 'DELETE_EVENT':\n      {\n        console.log(\"in reducer events.DELETE_EVENT\");\n        let otherevents = state.filter(event => {\n          if (event.id === action.event.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...otherevents];\n        console.log(\"in reducer events.DELETE_EVENT, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n    case 'APPLY_EVENTS_UPDATE':\n      {\n        console.log(\"in reducer events.APPLY_EVENTS_UPDATE\", action.events);\n        let newstate = [...action.events];\n        return newstate;\n      }\n    case 'GET_EVENTS':\n      {\n        console.log(\"in reducer events.GET_EVENTS\", state);\n        new RestAPI().getEvents(action.dispatch);\n        return state;\n      }\n    default:\n      console.log(\"in reducer event.default\");\n      return state;\n  }\n};\nexport default events;","map":{"version":3,"names":["RestAPI","initial","id","code","title","description","events","state","action","data","type","console","log","otherevents","filter","event","newstate","Object","assign","JSON","stringify","getEvents","dispatch"],"sources":["/home/wasadmin/LabFiles/MsdProject/projectday2/project-react-client-crud (copy)/src/reducers/events.js"],"sourcesContent":["import RestAPI from '../rest';\n\nconst initial = [\n    { id: 100, code: 'CNF001', title: 'All-Java Conference', description: 'Lectures and exhibits covering all Java topics' },\n    { id: 101, code: 'CNC001', title: 'Rock Concert', description: 'Full blown rock concert' }];\n\nconst events = (state = initial, action, data) => {\n    switch (action.type) {\n\n        case 'ADD_EVENT': {\n            console.log(\"in reducer event.ADD_EVENT\");\n            let otherevents = state.filter(\n                event => {\n                    if (event.id === action.event.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...otherevents, Object.assign({}, action.event)]\n            console.log(\"in reducer event.ADD_EVENT, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'DELETE_EVENT': {\n            console.log(\"in reducer events.DELETE_EVENT\");\n            let otherevents = state.filter(\n                (event) => {\n                    if (event.id === action.event.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...otherevents]\n            console.log(\"in reducer events.DELETE_EVENT, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'APPLY_EVENTS_UPDATE': {\n            console.log(\"in reducer events.APPLY_EVENTS_UPDATE\", action.events);\n            let newstate = [...action.events];\n            return newstate;\n        }\n        case 'GET_EVENTS': {\n            console.log(\"in reducer events.GET_EVENTS\", state);\n            new RestAPI().getEvents(action.dispatch);\n            return state;\n        }\n\n        default:\n            console.log(\"in reducer event.default\");\n            return state\n    }\n}\n\nexport default events"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAE7B,MAAMC,OAAO,GAAG,CACZ;EAAEC,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE,qBAAqB;EAAEC,WAAW,EAAE;AAAiD,CAAC,EACxH;EAAEH,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE,cAAc;EAAEC,WAAW,EAAE;AAA0B,CAAC,CAAC;AAE/F,MAAMC,MAAM,GAAGA,CAACC,KAAK,GAAGN,OAAO,EAAEO,MAAM,EAAEC,IAAI,KAAK;EAC9C,QAAQD,MAAM,CAACE,IAAI;IAEf,KAAK,WAAW;MAAE;QACdC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzC,IAAIC,WAAW,GAAGN,KAAK,CAACO,MAAM,CAC1BC,KAAK,IAAI;UACL,IAAIA,KAAK,CAACb,EAAE,KAAKM,MAAM,CAACO,KAAK,CAACb,EAAE,EAAG;YAC/B,OAAO,KAAK;UAChB,CAAC,MAAM;YACH,OAAO,IAAI;UACf;QACJ,CACJ,CAAC;QACD,IAAIc,QAAQ,GAAG,CAAC,GAAGH,WAAW,EAAEI,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,MAAM,CAACO,KAAK,CAAC,CAAC;QAChEJ,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGO,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;QAChF,OAAOA,QAAQ;MACnB;IAEA,KAAK,cAAc;MAAE;QACjBL,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C,IAAIC,WAAW,GAAGN,KAAK,CAACO,MAAM,CACzBC,KAAK,IAAK;UACP,IAAIA,KAAK,CAACb,EAAE,KAAKM,MAAM,CAACO,KAAK,CAACb,EAAE,EAAG;YAC/B,OAAO,KAAK;UAChB,CAAC,MAAM;YACH,OAAO,IAAI;UACf;QACJ,CACJ,CAAC;QACD,IAAIc,QAAQ,GAAG,CAAC,GAAGH,WAAW,CAAC;QAC/BF,OAAO,CAACC,GAAG,CAAC,4CAA4C,GAAGO,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;QACpF,OAAOA,QAAQ;MACnB;IAEA,KAAK,qBAAqB;MAAE;QACxBL,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEJ,MAAM,CAACF,MAAM,CAAC;QACnE,IAAIU,QAAQ,GAAG,CAAC,GAAGR,MAAM,CAACF,MAAM,CAAC;QACjC,OAAOU,QAAQ;MACnB;IACA,KAAK,YAAY;MAAE;QACfL,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEL,KAAK,CAAC;QAClD,IAAIP,OAAO,CAAC,CAAC,CAACqB,SAAS,CAACb,MAAM,CAACc,QAAQ,CAAC;QACxC,OAAOf,KAAK;MAChB;IAEA;MACII,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,OAAOL,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}