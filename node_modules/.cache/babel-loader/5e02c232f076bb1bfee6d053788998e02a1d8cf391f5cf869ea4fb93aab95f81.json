{"ast":null,"code":"const initial = {\n  usage: 'none',\n  customer: {\n    id: \"\",\n    name: \"\",\n    email: \"\"\n  },\n  event: {\n    id: \"-1\",\n    code: \"\",\n    title: \"\",\n    description: \"\"\n  },\n  registration: {\n    id: \"-1\",\n    event_id: \"-1\",\n    customer_id: \"-1\",\n    registration_date: -1,\n    notes: \"\"\n  }\n};\nconst formState = (state = initial, action, data) => {\n  switch (action.type) {\n    case 'UPDATE_CUSTOMER_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let customer = Object.assign({}, state.customer, field);\n        const obj = Object.assign({}, state, {\n          customer\n        });\n        return obj;\n      }\n    case 'UPDATE_CUSTOMER_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_customer = {\n          customer: {\n            id: \"-1\",\n            name: \"\",\n            email: \"\"\n          }\n        };\n        console.log(\"UPDATE_CUSTOMER_FORM_USAGE: (\" + action.usage + \") action.customer: \" + JSON.stringify(action.customer));\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_customer = {\n            customer: Object.assign({}, action.customer)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now()))).toString();\n          new_customer = {\n            customer: {\n              id: id,\n              name: \"\",\n              email: \"\"\n            }\n          };\n        }\n        return Object.assign({}, state, new_customer, usage);\n      }\n    case 'UPDATE_EVENT_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let event = Object.assign({}, state.event, field);\n        const obj = Object.assign({}, state, {\n          event\n        });\n        return obj;\n      }\n    case 'UPDATE_EVENT_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_event = {\n          event: {\n            id: -1,\n            code: \"\",\n            title: \"\",\n            description: \"\"\n          }\n        };\n        console.log(\"UPDATE_EVENT_FORM_USAGE: (\" + action.usage + \") action.event: \" + JSON.stringify(action.event));\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_event = {\n            event: Object.assign({}, action.event)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n          new_event = {\n            event: {\n              id: id,\n              code: \"\",\n              title: \"\",\n              description: \"\"\n            }\n          };\n        }\n        return Object.assign({}, state, new_event, usage);\n      }\n    case 'UPDATE_REGISTRATION_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let registration = Object.assign({}, state.registration, field);\n        const obj = Object.assign({}, state, {\n          registration\n        });\n        return obj;\n      }\n    case 'UPDATE_REGISTRATION_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_registration = {\n          registration: {\n            id: -1,\n            event_id: \"-1\",\n            customer_id: \"-1\",\n            registration_date: -1,\n            notes: \"\"\n          }\n        };\n        console.log(\"UPDATE_REGISTRATION_FORM_USAGE: (\" + action.usage + \") action.registration: \" + JSON.stringify(action.registration));\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_registration = {\n            registration: Object.assign({}, action.registration)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n          new_registration = {\n            registration: {\n              id: id,\n              event_id: \"-1\",\n              customer_id: \"-1\",\n              registration_date: -1,\n              notes: \"\"\n            }\n          };\n        }\n        return Object.assign({}, state, new_registration, usage);\n      }\n    default:\n      return state;\n  }\n};\nexport default formState;","map":{"version":3,"names":["initial","usage","customer","id","name","email","event","code","title","description","registration","event_id","customer_id","registration_date","notes","formState","state","action","data","type","field","field_name","field_value","Object","assign","obj","new_customer","console","log","JSON","stringify","Math","floor","random","Date","now","toString","new_event","new_registration"],"sources":["/home/wasadmin/LabFiles/MsdProject/projectday2/project-react-client-crud/src/reducers/formState.js"],"sourcesContent":["const initial = { \r\n  usage: 'none', \r\n  customer: { id: \"\", name: \"\", email: \"\" } ,\r\n  event: { id: \"-1\", code: \"\", title: \"\", description: \"\" },\r\n  registration: { id: \"-1\", event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" }\r\n};\r\n\r\nconst formState = (state = initial, action, data) => {\r\n\r\n  switch (action.type) {\r\n    case 'UPDATE_CUSTOMER_FORM_OBJECT': {\r\n      let field = {};\r\n      field[action.field_name] = action.field_value;\r\n      let customer = Object.assign({}, state.customer, field);\r\n      const obj = Object.assign({}, state, { customer });\r\n      return obj;\r\n    }\r\n\r\n    case 'UPDATE_CUSTOMER_FORM_USAGE': {\r\n      let usage = { usage: action.usage };\r\n      let new_customer = { customer: { id: \"-1\", name: \"\", email: \"\" } };\r\n\r\n      console.log(\"UPDATE_CUSTOMER_FORM_USAGE: (\" + action.usage + \") action.customer: \" + JSON.stringify(action.customer))\r\n\r\n      if (action.usage === 'view' || action.usage === 'edit') {\r\n        new_customer = { customer: Object.assign({}, action.customer) };\r\n      } else {\r\n        let id = Math.floor(1000 * (1 + Math.random(Date.now()))).toString();\r\n        new_customer = { customer: { id: id, name: \"\", email: \"\" } };\r\n      }\r\n\r\n      return Object.assign({}, state, new_customer, usage);\r\n    }\r\n\r\n    case 'UPDATE_EVENT_FORM_OBJECT': {\r\n      let field = {};\r\n      field[action.field_name] = action.field_value;\r\n      let event = Object.assign({}, state.event, field);\r\n      const obj = Object.assign({}, state, { event });\r\n      return obj;\r\n    }\r\n\r\n    case 'UPDATE_EVENT_FORM_USAGE': {\r\n      let usage = { usage: action.usage };\r\n      let new_event = { event: { id: -1, code: \"\", title: \"\", description: \"\" } };\r\n\r\n      console.log(\"UPDATE_EVENT_FORM_USAGE: (\" + action.usage + \") action.event: \" + JSON.stringify(action.event))\r\n\r\n      if (action.usage === 'view' || action.usage === 'edit') {\r\n        new_event = { event: Object.assign({}, action.event) };\r\n      } else {\r\n        let id = Math.floor(1000 * (1 + Math.random(Date.now())));\r\n        new_event = { event: { id: id, code: \"\", title: \"\", description: \"\" } };\r\n      }\r\n\r\n      return Object.assign({}, state, new_event, usage);\r\n    }\r\n\r\n    case 'UPDATE_REGISTRATION_FORM_OBJECT': {\r\n      let field = {};\r\n      field[action.field_name] = action.field_value;\r\n      let registration = Object.assign({}, state.registration, field);\r\n      const obj = Object.assign({}, state, { registration });\r\n      return obj;\r\n    }\r\n\r\n    case 'UPDATE_REGISTRATION_FORM_USAGE': {\r\n      let usage = { usage: action.usage };\r\n      let new_registration = { registration: { id: -1, event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" } };\r\n\r\n      console.log(\"UPDATE_REGISTRATION_FORM_USAGE: (\" + action.usage + \") action.registration: \" + JSON.stringify(action.registration))\r\n\r\n      if (action.usage === 'view' || action.usage === 'edit') {\r\n        new_registration = { registration: Object.assign({}, action.registration) };\r\n      } else {\r\n        let id = Math.floor(1000 * (1 + Math.random(Date.now())));\r\n        new_registration = { registration: { id: id, event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" } };\r\n      }\r\n\r\n      return Object.assign({}, state, new_registration, usage);\r\n    }\r\n    \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default formState"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}